
ATMega16_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006db  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000625  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000153f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Write>:
{
	SPDR = 0xFF;
	while (!(SPSR & (1<<SPIF)));
	return SPDR;
	
}
  6c:	8f b9       	out	0x0f, r24	; 15
  6e:	77 9b       	sbis	0x0e, 7	; 14
  70:	fe cf       	rjmp	.-4      	; 0x6e <SPI_Write+0x2>
  72:	08 95       	ret

00000074 <main>:
int main(void)
{
    DDRB |= (1<<DDB4) | (1<<DDB5) | (1<<DDB7);		//PB4,5,7 as Output
  74:	87 b3       	in	r24, 0x17	; 23
  76:	80 6b       	ori	r24, 0xB0	; 176
  78:	87 bb       	out	0x17, r24	; 23
	DDRB &= (~(1<<DDB6));							//PB6 as Input
  7a:	87 b3       	in	r24, 0x17	; 23
  7c:	8f 7b       	andi	r24, 0xBF	; 191
  7e:	87 bb       	out	0x17, r24	; 23
	
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
  80:	8d b1       	in	r24, 0x0d	; 13
  82:	81 65       	ori	r24, 0x51	; 81
  84:	8d b9       	out	0x0d, r24	; 13
	SPSR &= (~(1<<SPI2X)); 
  86:	8e b1       	in	r24, 0x0e	; 14
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	8e b9       	out	0x0e, r24	; 14
	
	
    while (1) 
    {
		PORTB &= (~(1<<PB4));
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	8f 7e       	andi	r24, 0xEF	; 239
  90:	88 bb       	out	0x18, r24	; 24
		SPI_Write('A');
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Write>
		PORTB |= (1<<PB4);
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	89 e6       	ldi	r24, 0x69	; 105
  a2:	98 e1       	ldi	r25, 0x18	; 24
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x30>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x3a>
  ae:	00 00       	nop
		_delay_ms(1000);
		
		PORTB &= (~(1<<PB4));
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	8f 7e       	andi	r24, 0xEF	; 239
  b4:	88 bb       	out	0x18, r24	; 24
		SPI_Write('B');
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Write>
		PORTB |= (1<<PB4);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	89 e6       	ldi	r24, 0x69	; 105
  c6:	98 e1       	ldi	r25, 0x18	; 24
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x54>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x5e>
  d2:	00 00       	nop
  d4:	db cf       	rjmp	.-74     	; 0x8c <main+0x18>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
